import Data.Bits
import Data.List
import Data.Array
import Data.Word
import Data.Int

newtype AesState = AesState (Array (Int, Int) Word8)
    deriving (Eq, Show)

mkAesState :: [Word8] -> AesState
mkAesState = AesState .  array ((0,0),(3,3)) . zip [(r, c) | c <- [0..3], r <- [0..3]]

fromAesState :: AesState -> [Word8]
fromAesState (AesState bytes) = [bytes ! (r, c) | c <- [0..3], r <- [0..3]]

groupN :: Int -> [a] -> [[a]]
groupN n [] = []
groupN n xs = take n xs : groupN n (drop n xs)

keyExpansion :: [Word8] -> Array Int AesState
keyExpansion ks = listArray (0, 10) . map (mkAesState . concat) $ groupN 4 ws
    where
        rcs = 1 : map (\rc -> if rc < 0x80 then 2*rc else (2 * rc) `xor` 0x1b) rcs
        rcon = map (\rc -> [rc, 0, 0, 0]) rcs
        rotWord [b1, b2, b3, b4] = [b2, b3, b4, b1] -- [b4, b1, b2, b3] -- 
        subWord = map (aesSBox !)
        xorWord as bs = zipWith xor as bs
        ws = map w [0..] :: [[Word8]]
        w i | i < 4 = (groupN 4 ks) !! i
            | mod i 4 == 0 = (ws !! (i - 4))
                            `xorWord` (subWord . rotWord $ ws !! (i - 1))
                            `xorWord` (rcon !! (div i 4 - 1))
            | otherwise = (ws !! (i - 4)) `xorWord` (ws !! (i - 1))

addRoundKey :: Array Int AesState -> Int -> AesState -> AesState
addRoundKey keys r (AesState bytes) = AesState . array (bounds bytes)
                                    . map (\(i, b) -> (i, b `xor` (key ! i)))
                                    $ assocs bytes
    where
        AesState key = keys ! r

subBytes :: AesState -> AesState
subBytes (AesState bytes) = AesState $ fmap (\b -> aesSBox ! b) bytes

shiftRows :: AesState -> AesState
shiftRows (AesState bytes) = AesState $ ixmap (bounds bytes)
                             (\(r, c) -> (r, mod (c + r) 4)) bytes

mixColumn :: [Word8] -> [Word8]
mixColumn a = map (foldr1 xor) [
               [b !! 0, a !! 3, a !! 2, b !! 1, a !! 1],
               [b !! 1, a !! 0, a !! 3, b !! 2, a !! 2],
               [b !! 2, a !! 1, a !! 0, b !! 3, a !! 3],
               [b !! 3, a !! 2, a !! 1, b !! 0, a !! 0]]
    where
        b = map (\x -> (x `shiftL` 1) `xor` (0x1b .&. (x `aShiftR` 7))) a
        aShiftR x n = fromIntegral ((fromIntegral x :: Int8) `shiftR` n)
        

mixColumns :: AesState -> AesState
mixColumns (AesState bytes) = AesState . array (bounds bytes) . concat
                            $ zipWith (\ci c -> zipWith (\ri x -> (((ri, ci), x))) [0..3] c)
                            [0..3] cs
    where
        cs = map mixColumn [[bytes ! (r, c) | r <- [0..3]] | c <- [0..3]]

encrypt :: [Word8] -> [Word8] -> [Word8]
encrypt key = fromAesState
            . addRoundKey k' 10 . shiftRows . subBytes
            . foldr1 (.) (map round [9,8..1])
            . addRoundKey k' 0 . mkAesState
    where
        k' = keyExpansion key
        round r = addRoundKey k' r . mixColumns . shiftRows . subBytes
        

aesSBox :: Array Word8 Word8
aesSBox = listArray (0, 255) [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b,
    0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0,
    0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26,
    0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2,
    0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0,
    0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed,
    0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f,
    0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5,
    0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec,
    0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14,
    0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c,
    0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d,
    0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f,
    0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e,
    0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11,
    0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f,
    0xb0, 0x54, 0xbb, 0x16 ]
